{"version":3,"sources":["domain/tools.js","components/tools.jsx","components/drawer.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["canvas","context","this","addEventListener","mouseMove","bind","mouseDown","mouseUp","mouseOut","event","drawing","moveTo","getRelativeMousePosition","lineWidth","strokeStyle","strokeColor","constructor","lineTo","stroke","beginPath","axis","axisMap","x","y","name","Tools","onSelectTool","onChangeColor","className","tools","map","tool","type","onClick","placeholder","onInput","target","value","Drawer","Tool","canvasReference","useRef","useEffect","current","getContext","handleDrawer","ref","width","height","App","useState","selectedTool","selectTool","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88190585.chunk.js","sourcesContent":["// @todo abstract all generic methods to outside the class\nclass FreeDrawingTool {\n  constructor(canvas, context) {\n    this.canvas = canvas;\n    this.context = context;\n  }\n\n  handleDrawer() {\n    const { canvas } = this;\n\n    canvas.addEventListener('mousemove', this.mouseMove.bind(this));\n    canvas.addEventListener('mousedown', this.mouseDown.bind(this));\n    canvas.addEventListener('mouseup', this.mouseUp.bind(this));\n    canvas.addEventListener('mouseout', this.mouseOut.bind(this));\n  }\n\n  mouseDown(event) {\n    this.drawing = true;\n    this.context.moveTo(\n      this.getRelativeMousePosition(event, 'x'),\n      this.getRelativeMousePosition(event, 'y'),\n    );\n    return event;\n  }\n\n  mouseUp(event) {\n    this.drawing = false;\n    return event;\n  }\n\n  mouseOut(event) {\n    this.drawing = false;\n    return event;\n  }\n\n  mouseMove(event) {\n    if (!this.drawing) return;\n\n    const { context } = this;\n\n    context.lineWidth = 5;\n    context.strokeStyle = this.strokeColor || this.constructor.strokeColor;\n    context.lineTo(\n      this.getRelativeMousePosition(event, 'x'),\n      this.getRelativeMousePosition(event, 'y'),\n    );\n\n    context.stroke();\n    context.beginPath();\n\n    context.moveTo(\n      this.getRelativeMousePosition(event, 'x'),\n      this.getRelativeMousePosition(event, 'y'),\n    );\n    // context.closePath();\n  }\n\n  getRelativeMousePosition(event, axis) {\n    const axisMap = {\n      x: ['clientX', 'offsetLeft'],\n      y: ['clientY', 'offsetTop'],\n    };\n\n    return event[axisMap[axis][0]] - this.canvas[axisMap[axis][1]];\n  }\n\n  static get name() {\n    return 'free-draw';\n  }\n\n  get name() {\n    return this.constructor.name;\n  }\n}\n\nexport default [FreeDrawingTool];\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport tools from '../domain/tools';\n\nexport default function Tools({ onSelectTool, onChangeColor }) {\n  return (\n    <div className=\"tools-container\">\n      <h4>Tools</h4>\n      {tools.map((tool) => (\n        <button type=\"button\" key={tool.name} onClick={() => onSelectTool(tool)}>\n          {tool.name}\n        </button>\n\n      ))}\n\n      <input name=\"color\" placeholder=\"color\" type=\"text\" onInput={(event) => onChangeColor(event.target.value)} />\n    </div>\n  );\n}\n","import React, { useEffect, useRef } from 'react';\n\nexport default function Drawer({ Tool }) {\n  const canvasReference = useRef();\n\n  useEffect(() => {\n    const canvas = canvasReference.current;\n    const context = canvas.getContext('2d');\n\n    if (Tool && context) {\n      const tool = new Tool(canvas, context);\n      tool.handleDrawer();\n    }\n  });\n\n  return (\n    <div className=\"canvas-container\">\n      <canvas ref={canvasReference} width=\"1500\" height=\"800\" />\n      <div className=\"selected-tool\">\n        Selected tool:\n        {' '}\n        {Tool?.name}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport Tools from './components/tools';\nimport Drawer from './components/drawer';\n\nfunction App() {\n  const [selectedTool, selectTool] = useState();\n\n  const handleSelectTool = (tool) => selectTool(() => tool);\n  const handleChangeColor = (color) => {\n    selectedTool.strokeColor = color;\n  };\n\n  return (\n    <div className=\"App\">\n      <Tools onSelectTool={handleSelectTool} onChangeColor={handleChangeColor} />\n      <Drawer Tool={selectedTool} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}